////////////////////////////////////////////////
//              Global Settings               //
////////////////////////////////////////////////

//  Whitespace and comments are fitted between every "~"
//  operation (unless the pattern is @ or $, and forcefully if 
//  the pattern is !).

//  That way, they can fill the gaps but can otherwise be ignored
//  for when constructing the AST.

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

multi_line_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
single_line_comment = @{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

COMMENT = _{ multi_line_comment | single_line_comment }

////////////////////////////////////////////////
//                   Terms                    //
////////////////////////////////////////////////

////// TODO: document the effects of allowing only unsigned integers
////// in the language.

//  Terms are the smallest concept in this grammar.
//  A term can either be:
//   - An expression (nested between two parenthesis)
//   - An integer literal
//   - A variable's id

//  Terms can be evaluated to have a value. In the 
//  case of the "expression" kind of Term, their
//  value is propagated to the left like this:
//   "a = 5"         // Value is 5
//   "1 < 2"         // Value is 1
//   "1 - (2 < 3)"   // Value is 0

int = @{ "0" | ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)* }

id = { ASCII_ALPHA_LOWER }

term = { paren_expr | id | int }

////////////////////////////////////////////////
//                Operations                  //
////////////////////////////////////////////////

//  Every term in Tiny-C is an integer, and operations 
//  both recieve and deliver integers, accordingly.

//  The effects of a summation and substraction are
//  straightforward.

//  A comparison returns 1 if true, and 0 if false.
//  Accordingly, when using control flow primitives,
//  1 will be true and 0 will be false.

//// TODO: document what truth value have the x > 1

summation = { term ~ "+" ~ sum }
substraction = { term ~ "-" ~ sum }
sum = { summation | substraction | term }

lt = { "<" }
leq = { "<=" }
gt = { ">" }
geq = { ">=" }
eq = { "==" }

comparison = { sum ~ (leq | lt | geq | gt | eq) ~ sum }

////////////////////////////////////////////////
//                Expressions                 //
////////////////////////////////////////////////

//  Expressions can either be assignments, comparisons
//  or arithmetic operations. The key factor
//  that differentiates an expression from a statement,
//  is the fact that expressions can evaluated to a value.

//  For better granularity, expressions can be nested in
//  between parenthesis. This allows them to be treated
//  as individualr terms, which in hand allows them
//  to be part of operations and comparisons.

assignment = { id ~ "=" ~ expr }
expr = !{ assignment | comparison | sum }

// An expression surrounded by parenthesis
paren_expr = { "(" ~ expr ~ ")"}

////////////////////////////////////////////////
//              Print Statements              //
////////////////////////////////////////////////

//  A program can print to Standard Output. There are
//  two options here:
//  - Printing a constant string, defined at compile time.
//  - Printing an integer value, derived from evaluating
//    an expression. 

string = @{ (!(NEWLINE | "\"") ~ ANY)* }

printable = ${ ("\"" ~ string ~ "\"") | expr }

print_statement = { "print" ~ "(" ~ printable ~ ")" ~ ";" }

////////////////////////////////////////////////
//                 Functions                  //
////////////////////////////////////////////////

//  ##  Declaration  ##

//  A program can define functions and call them.
//  Functions have no return value. Instead, they
//  write over the variables they are given as input.

//  If a function were to be given values and not
//  variables as input, its writing operations have
//  no lasting effect.

//  A function may not be given two of the same
//  variable as input, for any writes to that variable
//  would be contradictory.

//  A function's scope has the same set of 26 valid
//  variable identifiers, but they belong to the 
//  function, and are both new and not global.
//  This allows for easier separation of roles,
//  without having global side-effects caused by 
//  function calls.

//  To define a function, you need its name and
//  a list of parameters. The parameters are named
//  as any of the 26 valid identifiers, and cannot 
//  be repeated in the same declaration.

//  In order to return a value, the function overwrites
//  the value of some or all of the variables given
//  to it, by assigning values to them while it is 
//  running.

//  After the function call ends, the return values (if
//  any do apply) will be stored in the variables the 
//  caller gave as input.

//  Tiny-C supports recursion in its functions.

//  ##  Usage  ##

//  Functions are called using the keyword "call",
//  the name of the function, and a list of parameters.

//  The parameters of a function may be either variables
//  or expressions. Variables may be overwritten by the 
//  callee, as that is the way that functions return output.

//  Both the declaration and usage of functions are
//  considered statements, and have therefore no value they
//  can be evaluated to.

function_name = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

id_parameter_list = { id ~ (", " ~ id)* }

free_parameter_list = { expr ~ (", " ~ expr)* }

function_declaration_statement = { "fn" ~ function_name ~ "(" ~ id_parameter_list ~ ")" ~ statement }

function_usage_statement = { "call" ~ function_name ~ "(" ~ free_parameter_list ~ ")" ~ ";" }

////////////////////////////////////////////////
//               Control Flow                 //
////////////////////////////////////////////////

//  Control Flow statements allow for branching 
//	flow and conditional repetition of actions.

//	Their usage and syntax is pretty much the 
//	same as in C, with two caveats:

//	- Conditions cannot be combined with && nor ||
//	- Conditions are represented as integers: 
//		x = 0 is False
//		x > 0	is True

if_else = { "if" ~ paren_expr ~ statement ~ "else" ~ statement }
_if = { "if" ~ paren_expr ~ statement }
do_while = { "do" ~ statement ~ "while" ~ paren_expr ~ ";" }
_while = { "while" ~ paren_expr ~ statement }

////////////////////////////////////////////////
//              Other Statements              //
////////////////////////////////////////////////

//  Not all Statements are shiny and special. Most
//  of them are just building blocks from which
//  everything else is built.

//  Other Statements include:

//  - The Scoped Statement, which encloses one or
//		more Statements inside of it (useful for Ifs 
//		and Whiles)
scoped_statement = { "{" ~ statement+ ~ "}" }

//  - The Expression Statement, which encapsulates 
//		an expression, turning it into a statement.
expr_statement = { expr ~ ";" }

//  - The Semicolon Statement, which is a no-op.
semicolon_statement = { ";" }

//  Here's the full list of Statements:
statement = { 
  if_else 
  | _if 
  | do_while 
  | _while 
  | scoped_statement 
  | expr_statement
  | semicolon_statement
  | print_statement
  | function_declaration_statement
  | function_usage_statement
} 

////////////////////////////////////////////////
//            The Language Itself             //
////////////////////////////////////////////////

//  The language itself is just a big statement
//  trapped between the Start of Input and
//  the End of Input.

tiny_c = _{ SOI ~ statement ~ EOI }
